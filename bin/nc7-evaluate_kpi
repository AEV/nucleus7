#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# ==============================================================================
# Copyright (c) 2019 Audi Electronics Venture GmbH. All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla
# Public License, v. 2.0. If a copy of the MPL was not distributed
# with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
# ==============================================================================
#
# pylint: disable=anomalous-backslash-in-string
# backslashes are needed to show the command since it is multi line

"""
Main script to evaluate KPIs using DataFeeder to feed the data and callbacks
for data postprocessing following KPIEvaluator


Example
-------
.. code-block:: bash

    $ nc7-evaluate_kpi \
    $ path/to/project/dir \
    $ [--run_name name of the run] \
    $ [--additional_configs_path path/to/additional/configs] \
    $ [--number_of_shards 4] \ # split data to 4 chunks
    $ [--shard_index 2] \ # and infer second chunk
    $ [--batch_size 10] \
    $ [--use_single_process] \
"""

import argparse
import os

import matplotlib
matplotlib.use('Agg')

# pylint: disable=wrong-import-position
# matplotlib should be imported before to set the backend
from nucleus7.builders.runs_builder import build_kpi_evaluate
from nucleus7.core.project_dirs import read_kpi_configs_from_directories
from nucleus7.utils import cli_utils
# pylint: enable=wrong-import-position


def construct_parser():
    """
    Construct the parser
    """
    description = (
        "Main script to start KPI evaluation.\n\n"
        "Project directory should have kpi_evaluation/configs folder "
        "inside with following tree:\n"
        "    * (optional) configs_main.json - main config which may contain \n"
        "all other configurations\n"
        "    * datafeeder.json - data feeder configuration\n"
        "    * (optional) callbacks/{callback1..n}.json - files with "
        "arbitrary names with callbacks\n"
        "    * kpis/{kpi_plugin_or_accumulators1..n}.json - files "
        "with arbitrary names with kpi plugins or accumulators\n"
        "This is also possible to provide the additional config directory \n"
        "with same structure, which will update the configs from here"
    )
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('project_dir', type=str,
                        help='project directory to use')
    parser.add_argument('-r', '--run_name', type=str, required=False,
                        help='name of kpi evaluation run')
    parser.add_argument("-a", '--additional_configs_path', required=False,
                        type=str, help='additional directory with configs')
    parser.add_argument('-b', '--batch_size', required=False, type=int,
                        default=1, help='batch size')
    parser.add_argument('-n', '--number_of_shards', required=False, type=int,
                        default=1, help='number of shards for data feeder')
    parser.add_argument('-i', '--shard_index', required=False, type=int,
                        default=0, help='shard index')
    parser.add_argument('--use_single_process', dest='use_single_process',
                        action='store_true', default=None,
                        help="use single process for data and callbacks")
    parser.add_argument('--prefetch_buffer_size', required=False, type=int,
                        help='number of batches to prefetch')
    parser.add_argument(
        "-l", "--logLevel", dest="logLevel",
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
        help="Set logging level")
    return parser


def parse_config_main():
    """
    Parse config
    """
    parser = construct_parser()
    args = cli_utils.parse_config(parser)
    project_dir = args.pop('project_dir')
    run_name = args.pop('run_name')
    project_dir = os.path.realpath(project_dir)
    os.chdir(project_dir)
    additional_configs_path = args.pop('additional_configs_path', None)

    config_main = read_kpi_configs_from_directories(
        project_dir, run_name=run_name, verify_unused_configs=True,
        additional_dir_with_configs=additional_configs_path)

    config_main['project_dir'] = project_dir
    config_main['run_name'] = run_name
    config_main["batch_size"] = args.get('batch_size')
    config_main["number_of_shards"] = args.get('number_of_shards')
    config_main["shard_index"] = args.get('shard_index')
    config_main["use_single_process"] = args.get("use_single_process")
    config_main["prefetch_buffer_size"] = args.get("prefetch_buffer_size")

    return config_main


def main():
    """
    Run the data extraction from the CLI
    """
    config_main = parse_config_main()
    # pylint: disable=missing-kwoa
    # all keywords are inside of config_main
    coordinator = build_kpi_evaluate(**config_main)
    coordinator.visualize_project_dna(verbosity=0)
    coordinator.run()


if __name__ == '__main__':
    main()
